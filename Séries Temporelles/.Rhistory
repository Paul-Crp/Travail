attach(cars_quantitative2)
#detach(cars_quantitative)
plot(MPG,Weight)
plot(MPG,Drive_Ratio)
plot(MPG,Horsepower)
plot(MPG,Displacement)
plot(MPG,Cylinders)
pairs(cars_quantitative2)
round(cor(cars_quantitative2),2)
round(cor(cars_quantitative2[,-6]),2)
one=rep(1,38)
x=as.matrix(cbind(one,cars_quantitative[,2:6]))
y=data.matrix(cars_quantitative[,1])
# Solve permet d'inverser des matrices, PAS ^-1 (faire l'inverse de chaque nombres dans la matrice) !!!!!!!
bêta=solve((t(x)%*%x))%*%t(x)%*%y
yy=x%*%bêta
eps=y-yy
Px=x%*%solve(t(x)%*%x)%*%t(x)
epss=(diag(38)-Px)%*%y
#eps et epss sont identique, différentes méthodes
p=ncol(cars_quantitative)
sigma=sqrt(sum(eps^2))/(38-6)
SCR= sum(eps^2)
SCT=sum((yy-mean(cars_quantitative[,1]))^2)
SCE=SCR+SCT
R2=SCE/SCT
R2a= 1-(37)/(32)*(1-R2)
yy
eps
sigma
yy=x%*%bêta
eps=y-yy
Px=x%*%solve(t(x)%*%x)%*%t(x)
epss=(diag(38)-Px)%*%y
#eps et epss sont identique, différentes méthodes
p=ncol(cars_quantitative)
sigma=sqrt(sum(eps^2))/(38-p)
SCR= sum(eps^2)
SCT=sum((yy-mean(cars_quantitative[,1]))^2)
SCE=SCR+SCT
R2=SCE/SCT
R2a= 1-(37)/(32)*(1-R2)
SCR= sum(eps^2)
SCE=sum((yy-mean(cars_quantitative[,1]))^2)
SCT=SCR+SCT
R2=SCE/SCT
R2a= 1-(37)/(32)*(1-R2)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg
knitr::opts_chunk$set(echo = TRUE)
cars <- read.delim("C:/Users/Pol/Desktop/RStudio/Régression linéaire/cars.txt")
cars_quantitative <- cars[,3:8]
attach(cars_quantitative)
#detach(cars_quantitative)
plot(MPG,Weight)
plot(MPG,Drive_Ratio)
plot(MPG,Horsepower)
plot(MPG,Displacement)
plot(MPG,Cylinders)
pairs(cars_quantitative)
round(cor(cars_quantitative),2)
round(cor(cars_quantitative[,-6]),2)
# On retire les cylindrés avec le -6 car ce n'est pas une variable "continue"
cars_quantitative2 <- cars_quantitative[2:38,]
attach(cars_quantitative2)
#detach(cars_quantitative)
plot(MPG,Weight)
plot(MPG,Drive_Ratio)
plot(MPG,Horsepower)
plot(MPG,Displacement)
plot(MPG,Cylinders)
pairs(cars_quantitative2)
round(cor(cars_quantitative2),2)
round(cor(cars_quantitative2[,-6]),2)
one=rep(1,38)
x=as.matrix(cbind(one,cars_quantitative[,2:6]))
y=data.matrix(cars_quantitative[,1])
# Solve permet d'inverser des matrices, PAS ^-1 (faire l'inverse de chaque nombres dans la matrice) !!!!!!!
bêta=solve((t(x)%*%x))%*%t(x)%*%y
yy=x%*%bêta
eps=y-yy
Px=x%*%solve(t(x)%*%x)%*%t(x)
epss=(diag(38)-Px)%*%y
#eps et epss sont identique, différentes méthodes
p=ncol(cars_quantitative)
sigma=sqrt(sum(eps^2))/(38-p)
SCR= sum(eps^2)
SCE=sum((yy-mean(cars_quantitative[,1]))^2)
SCT=SCR+SCT
SCT=SCR+SCT
SCR= sum(eps^2)
SCE=sum((yy-mean(cars_quantitative[,1]))^2)
SCT=SCR+SCE
R2=SCE/SCT
R2a= 1-(37)/(32)*(1-R2)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg
View(bêta)
summary(reg)
attach(cars_quantitative)
one=rep(1,38)
x=as.matrix(cbind(one,cars_quantitative[,2:6]))
y=data.matrix(cars_quantitative[,1])
# Solve permet d'inverser des matrices, PAS ^-1 (faire l'inverse de chaque nombres dans la matrice) !!!!!!!
bêta=solve((t(x)%*%x))%*%t(x)%*%y
yy=x%*%bêta
eps=y-yy
Px=x%*%solve(t(x)%*%x)%*%t(x)
epss=(diag(38)-Px)%*%y
#eps et epss sont identique, différentes méthodes
p=ncol(cars_quantitative)
sigma=sqrt(sum(eps^2))/(38-p)
SCR= sum(eps^2)
SCE=sum((yy-mean(cars_quantitative[,1]))^2)
SCT=SCR+SCE
R2=SCE/SCT
R2a= 1-(37)/(32)*(1-R2)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg
summary(reg)
knitr::opts_chunk$set(echo = TRUE)
cars <- read.delim("C:/Users/Pol/Desktop/RStudio/Régression linéaire/cars.txt")
cars_quantitative <- cars[,3:8]
attach(cars_quantitative)
#detach(cars_quantitative)
plot(MPG,Weight)
plot(MPG,Drive_Ratio)
plot(MPG,Horsepower)
plot(MPG,Displacement)
plot(MPG,Cylinders)
pairs(cars_quantitative)
round(cor(cars_quantitative),2)
round(cor(cars_quantitative[,-6]),2)
# On retire les cylindrés avec le -6 car ce n'est pas une variable "continue"
cars_quantitative2 <- cars_quantitative[2:38,]
attach(cars_quantitative2)
#detach(cars_quantitative)
plot(MPG,Weight)
plot(MPG,Drive_Ratio)
plot(MPG,Horsepower)
plot(MPG,Displacement)
plot(MPG,Cylinders)
pairs(cars_quantitative2)
round(cor(cars_quantitative2),2)
round(cor(cars_quantitative2[,-6]),2)
one=rep(1,38)
x=as.matrix(cbind(one,cars_quantitative[,2:6]))
y=data.matrix(cars_quantitative[,1])
# Solve permet d'inverser des matrices, PAS ^-1 (faire l'inverse de chaque nombres dans la matrice) !!!!!!!
bêta=solve((t(x)%*%x))%*%t(x)%*%y
yy=x%*%bêta
eps=y-yy
Px=x%*%solve(t(x)%*%x)%*%t(x)
epss=(diag(38)-Px)%*%y
#eps et epss sont identique, différentes méthodes
p=ncol(cars_quantitative)
sigma=sqrt(sum(eps^2))/(38-p)
SCR= sum(eps^2)
SCE=sum((yy-mean(cars_quantitative[,1]))^2)
SCT=SCR+SCE
R2=SCE/SCT
R2a= 1-(37)/(32)*(1-R2)
detach(cars_quantitative2)
attach(cars_quantitative)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg
summary(reg)
(n-p)
(38-p)/5*r2*r2/(1-r2*r2)
(38-p)/5*R2*R2/(1-R2*R2)
((38-p)/5)*R2*R2/(1-R2*R2)
((38-p)/5)*R2/(1-R2)
1-pf(fisher,p-1,n-p)
1-pf(fisher.test(),p-1,n-p)
1-pf(fisher.test,p-1,n-p)
1-pf(fisher.test,p-1,38-p)
help(pf)
fisher=((38-p)/5)*R2/(1-R2)
fisher=((38-p)/5)*R2/(1-R2)
pval_fisher=1-pf(fisher,p-1,38-p)
detach(cars_quantitative)
attach(cars_quantitative2)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg
summary(reg)
detach(cars_quantitative)
attach(cars_quantitative2)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement)
reg
summary(reg)
detach(cars_quantitative)
attach(cars_quantitative2)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg
summary(reg)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement)
reg
summary(reg)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement)
reg
summary(reg)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower)
reg
summary(reg)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement)
reg
summary(reg)
reg=lm(MPG~Weight+Drive_Ratio+Horsepower)
reg
summary(reg)
reg=lm(MPG~Weight+Drive_Ratio)
reg
summary(reg)
help("step")
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg
summary(reg)
step(reg)
step(reg)
reg1=step(reg)
reg1=step(reg1)
reg1=step(reg1)
reg1=step(reg1)
remove(reg1)
help("glm")
help(BIC)
reg=lm(cars_quantitative[1,]~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg=lm(cars_quantitative[,1]~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg=lm(cars_quantitative2[,1]~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg=lm(cars_quantitative2[1,]~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg=lm(cars_quantitative2[,2]~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg=lm(cars_quantitative2[,1]~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
summary(reg)
reg=lm(cars_quantitative2[,4]~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
summary(reg)
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
summary(reg)
}}}
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
summary(reg)
}}}
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
summary(reg)
print(1)
}}}
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i!=ii & ii!=iii & i!=iii){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
summary(reg)
print(1)
}}}}
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
summary(reg)
print(1)
}}}}
R2=c()
R2a=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
R2=reg$R.squared
R2a=reg$adj.R.squared
}}}}
R2=c()
R2a=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
R2=reg$R.squared
R2a=reg$adj.R.squared
}}}}
R2
R2a
reg$R.squared
reg
R2=c()
R2a=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=summary(lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii]))
R2=reg$R.squared
R2a=reg$adj.R.squared
}}}}
R2
R2a
reg
reg$R.squared
reg$adj.R.squared
reg$adj.r.squared
R2=c()
R2a=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=summary(lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii]))
R2=reg$r.squared
R2a=reg$adj.r.squared
}}}}
R2
R2a
R2=c()
R2a=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=summary(lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii]))
for (a in 1:10)
R2[1]=reg$r.squared
R2a(1)=reg$adj.r.squared
}}}}
R2=c()
R2a=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=summary(lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii]))
for (a in 1:10)
R2[1]=reg$r.squared
R2a[1]=reg$adj.r.squared
}}}}
R2
R2a
R2=c()
R2a=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=summary(lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii]))
for (a in 1:10)
R2[a]=reg$r.squared
R2a[a]=reg$adj.r.squared
}}}}
R2
R2a
R2=c()
R2a=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=summary(lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii]))
R2=c(R2,reg$r.squared)
R2a=c(R2a,reg$adj.r.squared)
}}}}
R2
R2a
BIC(reg)
BIC(lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders))
R2=c()
R2a=c()
AIC=c()
BIC=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
R2=c(R2,summary(reg)$r.squared)
R2a=c(R2a,summary(reg)$adj.r.squared)
}}}}
R2
R2a
R2=c()
R2a=c()
AIC=c()
BIC=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
R2=c(R2,summary(reg)$r.squared)
R2a=c(R2a,summary(reg)$adj.r.squared)
AIC=c(AIC,AIC(reg))
BIC=c(BIC,BIC(reg))
}}}}
R2
R2a
R2=c()
R2a=c()
AIC=c()
BIC=c()
for (i in 2:4){
for (ii in 3:5){
for (iii in 4:6){
if (i<ii & ii<iii & i<iii){
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,i]+cars_quantitative2[,ii]+cars_quantitative2[,iii])
R2=c(R2,summary(reg)$r.squared)
R2a=c(R2a,summary(reg)$adj.r.squared)
AIC=c(AIC,AIC(reg))
BIC=c(BIC,BIC(reg))
}}}}
R2
R2a
AIC
BIC
help(addterms)
help('addterms')
help("addterms")
help("drop.terms")
help("dropterms")
help(dropterms)
help(NA)
matrix(data = c(US,France,Germany,Japan,Pontiac,CitroenC3,AudiA3,ToyotaCorona,NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona"",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
)
")"
matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
pre[,3]
pre=matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
pre[,3]
pre=matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
pre=matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
reg
reg(1)
reg[1]
View(reg)
reg[1,1]
reg$coefficients
reg$coefficients[1]
summary(reg)
pre=matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
reg
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*pre[,4]+reg$coefficients[3]*pre[,5]+reg$coefficients[4]*pre[,6]
reg$coefficients[2]
as.numeric(reg$coefficients[2])*pre[,4]
as.numeric(reg$coefficients[2])*as.numeric(pre[,4])
reg$coefficients[2]*as.numeric(pre[,4])
pre=matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
reg
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])+reg$coefficients[4]*as.numeric(pre[,6])
pre
pre=matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
reg
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])+reg$coefficients[4]*as.numeric(pre[,6])
predict(reg,pre,interval='conf')
pre=matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
reg
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])+reg$coefficients[4]*as.numeric(pre[,6])
predict(reg,as.dataframe(pre),interval='conf')
pre=matrix(data = c("US","France","Germany","Japan","Pontiac","CitroenC3","AudiA3","ToyotaCorona",NA,NA,NA,NA,3.654,2.99,3.22,4.001,3.044,3.101,2.885,3.965,95,102,65,128,120,192,136,145,8,5,8,7), nrow=4)
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
reg
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])+reg$coefficients[4]*as.numeric(pre[,6])
predict(reg,as.data.frame(pre),interval='conf')
as.data.frame(pre)
reg=lm(MPG~Weight+Drive_Ratio)
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])+reg$coefficients[4]*as.numeric(pre[,6])
^re
pre
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])+reg$coefficients[4]*as.numeric(pre[,6])
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])
pre
nouveau=data.frame(Weight=3.654,Drive_Ratio=3.044,Horsepower=95,Displacement=120,Cylinders=8)
predict(reg,as.new=nouveau,interval='conf')
nouveau=data.frame(Weight=3.654,Drive_Ratio=3.044,Horsepower=95,Displacement=120,Cylinders=8)
predict(reg,new=nouveau,interval='conf')
reg=lm(cars_quantitative2[,1]~cars_quantitative2[,2]+cars_quantitative2[,3]+cars_quantitative2[,4])
nouveau=data.frame(Weight=3.654,Drive_Ratio=3.044,Horsepower=95,Displacement=120,Cylinders=8)
predict(reg,new=nouveau,interval='conf')
reg=lm(MPG~Weight+Drive_Ratio+Horsepower+Displacement+Cylinders)
reg
nouveau=data.frame(Weight=3.654,Drive_Ratio=3.044,Horsepower=95,Displacement=120,Cylinders=8)
predict(reg,new=nouveau,interval='conf')
pre[,3]=reg$coefficients[1]+reg$coefficients[2]*as.numeric(pre[,4])+reg$coefficients[3]*as.numeric(pre[,5])+reg$coefficients[4]*as.numeric(pre[,6])
pre
devtools::install_github("EmaCerez/HAX815X_Minesweeper")
library(HAX815)
run_app()
devtools::install_github("EmaCerez/HAX815X_Minesweeper")
library(HAX815)
run_app()
library(shinyWidgets)
run_app()
.libPaths()
rm(zoo)
rm("zoo")
setwd("C:/Users/Pol/Desktop/RStudio/Séries Temporelles")
